spring:
  datasource:
    continue-on-error: true
    driver-class-name: org.postgresql.Driver
    initialization-mode: always
    password: password
    url: url
    username: username

bot:
  token: token
  username: username

target.chat.id: 0

sql:
  queries:
    insertMeme: >
      insert into meme2 (chat_id, message_id, sender_id, file_id)
      values (:chatId, :messageId, :senderId, :fileId)
    insertUserIfNotExists: >
      insert into users (user_id, username, first_name, last_name)
      select :userId, :username, :firstName, :lastName
      where not exists (select 1 from users where user_id = :userId)
    findMemeSender: >
      select sender_id from meme2 where chat_id = :chatId and message_id = :messageId
    voteExists: >
      select exists(
        select 1 from vote2
        where
          chat_id = :chatId
          and message_id = :messageId
          and voter_id = :voterId
          and value = :value::vote_value)
    insertOrUpdateVote: >
      insert into vote2(chat_id, message_id, voter_id, value)
      values (:chatId, :messageId, :voterId, :value::vote_value)
      on conflict (chat_id, message_id, voter_id)
      do update set value = :value::vote_value
    deleteVote: >
      delete from vote2
      where
        chat_id = :chatId
        and message_id = :messageId
        and voter_id = :voterId
    findVoteStats: >
      select value, count(value)
      from vote2
      where
        chat_id = :chatId and message_id = :messageId
      group by value
