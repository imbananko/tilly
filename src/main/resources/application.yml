spring:
  datasource:
    continue-on-error: true
    driver-class-name: org.postgresql.Driver
    initialization-mode: always
    password: password
    url: url
    username: username

bot:
  token: token
  username: username

target.chat.id: 0
beta.chat.id: -1001401091410

sql:
  queries:
    insertMeme: >
      insert into meme (chat_message_id, sender_id, file_id, private_message_id, caption)
      values (:chatMessageId, :senderId, :fileId, :privateMessageId, :caption)
    insertUserIfNotExists: >
      insert into telegram_user (id, username, first_name, last_name)
      values (:userId, :username, :firstName, :lastName)
      on conflict do nothing
    findMemeByMessageId: >
      select chat_message_id, sender_id, file_id, channel_message_id, private_message_id, caption
      from meme
      where chat_message_id = :chatMessageId
    findMemeByFileId: >
      select chat_message_id, sender_id, file_id, channel_message_id, private_message_id, caption
      from meme
      where file_id = :fileId
    findMemeByChannelMessageId: >
      select chat_message_id, sender_id, file_id, channel_message_id, private_message_id, caption
      from meme
      where channel_message_id = :channelMessageId
    insertOrUpdateVote: >
      insert into vote(chat_message_id, voter_id, value, source)
      values (:chatMessageId, :voterId, :value::vote_value, :source::vote_source)
      on conflict (chat_message_id, voter_id)
          do update set value  = :value::vote_value
    deleteVote: >
      delete from vote
      where
        chat_message_id = :chatMessageId
        and voter_id = :voterId
    findUserStats: >
      select m.chat_message_id,
             count(v.value) filter ( where value = 'UP')    as up,
             count(v.value) filter ( where value = 'DOWN' ) as down,
             case when channel_message_id is not null then true end as is_published
      from meme m
               left join vote v on m.chat_message_id = v.chat_message_id
      where m.sender_id = :userId
      group by m.chat_message_id
    findMemeVotes: >
      select chat_message_id, voter_id, value, source
      from vote
      where chat_message_id = :chatMessageId
    selectAllMemes: >
      select file_id, sender_id, chat_message_id, channel_message_id, private_message_id, caption
      from meme
    getMemeOfTheWeek: >
      select m.chat_message_id,
             m.sender_id,
             m.file_id,
             m.channel_message_id,
             m.private_message_id,
             m.caption,
             count(value) filter (where value = 'UP') - count(value) filter (where value = 'DOWN') as difference
      from meme m
            join vote v on m.chat_message_id = v.chat_message_id
      where m.created_at > current_timestamp - interval '7 days'
      group by m.chat_message_id
      order by difference desc
      limit 1
    getMemesOfTheYear: >
      select m.chat_message_id,
             m.sender_id,
             m.file_id,
             m.channel_message_id,
             m.private_message_id,
             m.caption,
             count(value) filter (where value = 'UP') as up_count,
             count(value) filter (where value = 'EXPLAIN') as explain_count,
             count(value) filter (where value = 'DOWN') as down_count
      from meme m
               join vote v on m.chat_message_id = v.chat_message_id
      group by m.chat_message_id, m.sender_id, m.file_id
      order by up_count desc, down_count, explain_count
      limit 10
    updateMeme: >
      update meme
      set
        chat_message_id = :newMessageId,
        sender_id = :newSenderId,
        file_id = :newFileId,
        channel_message_id = :newChannelMessageId
      where
        chat_message_id = :oldMessageId
        and sender_id = :oldSenderId
        and file_id = :oldFileId
        and (channel_message_id = :oldChannelMessageId or channel_message_id is null)
    insertMemeOfWeek: >
      insert into meme_of_week (chat_message_id)
      values (:chatMessageId)
    insertImage: >
      insert into image (file_id, file)
      values (:fileId, :file)
    selectAllImages: >
      select file_id, file
      from image