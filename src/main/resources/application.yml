spring:
  datasource:
    continue-on-error: true
    driver-class-name: org.postgresql.Driver
    initialization-mode: always
    password: password
    url: url
    username: username

bot:
  token: token
  username: username

target.chat.id: 0

sql:
  queries:
    insertMeme: >
      insert into meme (chat_id, message_id, sender_id, file_id)
      values (:chatId, :messageId, :senderId, :fileId)
    insertUserIfNotExists: >
      insert into users (user_id, username, first_name, last_name)
      select :userId, :username, :firstName, :lastName
      where not exists (select 1 from users where user_id = :userId)
    findMemeSender: >
      select sender_id from meme where chat_id = :chatId and message_id = :messageId
    voteExists: >
      select exists(
        select 1 from vote
        where
          chat_id = :chatId
          and message_id = :messageId
          and voter_id = :voterId
          and value = :value::vote_value)
    insertOrUpdateVote: >
      insert into vote(chat_id, message_id, voter_id, value)
      values (:chatId, :messageId, :voterId, :value::vote_value)
      on conflict (chat_id, message_id, voter_id)
      do update set value = :value::vote_value
    deleteVote: >
      delete from vote
      where
        chat_id = :chatId
        and message_id = :messageId
        and voter_id = :voterId
    findVoteStats: >
      select value, count(value)
      from vote
      where
        chat_id = :chatId and message_id = :messageId
      group by value
    loadMemes: >
      select file_id, sender_id, chat_id, message_id
      from meme
      where chat_id = :chatId
    messageIdByFileId: >
      select message_id
      from meme
      where chat_id = :chat_id and file_id = :file_id
      order by created_at desc
      limit 1
    getMemeOfTheWeek: >
      select m.chat_id,
             m.message_id,
             m.sender_id,
             m.file_id,
             count(value) filter (where value = 'UP') as up_count,
             count(value) filter (where value = 'EXPLAIN') as explain_count,
             count(value) filter (where value = 'DOWN') as down_count
      from meme m
          join vote v on m.chat_id = v.chat_id and m.message_id = v.message_id
      where m.chat_id = :chatId and m.created_at > timezone('MSK'::text, now()) - interval '7 days'
      group by m.chat_id, m.message_id
      order by up_count desc, down_count, explain_count, m.created_at desc
      limit 1
