package com.chsdngm.tilly.handlers

import com.chsdngm.tilly.config.TelegramConfig
import com.chsdngm.tilly.metrics.MetricsUtils
import com.chsdngm.tilly.model.CommandUpdate
import com.chsdngm.tilly.model.VoteValue
import com.chsdngm.tilly.model.dto.Meme
import com.chsdngm.tilly.model.dto.Vote
import com.chsdngm.tilly.repository.MemeDao
import com.chsdngm.tilly.repository.TelegramUserDao
import com.chsdngm.tilly.repository.VoteDao
import com.chsdngm.tilly.utility.minusDays
import org.junit.jupiter.api.Test
import org.mockito.Mockito.*
import org.telegram.telegrambots.bots.DefaultAbsSender
import org.telegram.telegrambots.meta.api.methods.ParseMode
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import java.time.Instant

class CommandHandlerTest {
    private val telegramUserDao = mock(TelegramUserDao::class.java)
    private val memeDao = mock(MemeDao::class.java)
    private val voteDao = mock(VoteDao::class.java)
    private val api = mock(DefaultAbsSender::class.java)

    private val commandHandler = CommandHandler(telegramUserDao, memeDao, voteDao, mock(MetricsUtils::class.java), api)

    @Test
    fun shouldSendInfoMessageWhenHelpOrStartCommandReceived() {
        val update = mock(CommandUpdate::class.java).apply {
            `when`(value).thenReturn(CommandUpdate.Command.HELP)
            `when`(messageId).thenReturn(666)
            `when`(senderId).thenReturn("senderId")
        }

        val sendMessageMethod = SendMessage().apply {
            chatId = update.senderId
            parseMode = ParseMode.HTML
            //TODO: fix the static mocking for bot_name in text
            text = """
                –ü—Ä–∏–≤–µ—Ç, —è ${TelegramConfig.BOT_USERNAME}. 

                –ß–∞—Ç —Å–æ –º–Ω–æ–π - —ç—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è —Ç–≤–æ–∏—Ö –ª—É—á—à–∏—Ö –º–µ–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –æ—Ö–æ—Ç–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è.
                –°–µ–π—á–∞—Å –∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ —Å–∞–º—ã–π –∫—Ä—É—Ç–æ–π –º–µ–º, –∏, –µ—Å–ª–∏ –æ–Ω –ø—Ä–æ–π–¥—ë—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é, —Ç–æ –ø–æ–ø–∞–¥—ë—Ç –Ω–∞ –∫–∞–Ω–∞–ª <a href="https://t.me/chsdngm/">—á–µ —Å –¥–µ–Ω—å–≥–∞–º–∏</a>. 
                –ú–µ–º, –Ω–∞–±—Ä–∞–≤—à–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é –±–æ–ª—å—à–µ –≤—Å–µ—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤, —Å—Ç–∞–Ω–µ—Ç <b>–º–µ–º–æ–º –Ω–µ–¥–µ–ª–∏</b>, –∞ –µ–≥–æ –æ–±–ª–∞–¥–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ—Å–ø–µ–∫—Ç –∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª–µ.

                –¢–µ—Ä–º–∏–Ω—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:

                –ú–µ–º (–∞–Ω–≥–ª. meme) ‚Äî –µ–¥–∏–Ω–∏—Ü–∞ –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏–º–µ—é—â–µ–π —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä (–≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ - –∫–∞—Ä—Ç–∏–Ω–∫–∞). 
                –ú–æ–¥–µ—Ä–∞—Ü–∏—è (–æ—Ç –ª–∞—Ç. moderor ‚Äî —É–º–µ—Ä—è—é, —Å–¥–µ—Ä–∂–∏–≤–∞—é) ‚Äî –≤—Å–µ –º–µ–º—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤, –∞ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–ø–∞–¥—É—Ç —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ. 

                –ó–∞ –¥–∏–Ω–∞–º–∏–∫–æ–π –æ—Ü–µ–Ω–∫–∏ —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å —Ç—É—Ç.
            """.trimIndent()
        }

        commandHandler.handleSync(update)
        `when`(update.value).thenReturn(CommandUpdate.Command.START)
        commandHandler.handleSync(update)

        verify(api, times(2)).execute(sendMessageMethod)
        verifyNoMoreInteractions(telegramUserDao, memeDao, voteDao, api)
    }

    @Test
    fun shouldEnablePublicationWhenConfigCommandReceived() {
        val update = mock(CommandUpdate::class.java).apply {
            `when`(value).thenReturn(CommandUpdate.Command.CONFIG)
            `when`(messageId).thenReturn(666)
            //TODO fix the static mocking properties
            `when`(chatId).thenReturn(TelegramConfig.BETA_CHAT_ID)
            `when`(text).thenReturn("enable publishing")
        }

        commandHandler.handleSync(update)

        val sendMessageMethod = SendMessage().apply {
            chatId = TelegramConfig.BETA_CHAT_ID
            parseMode = ParseMode.HTML
            replyToMessageId = update.messageId
            text = "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–µ–º–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞"
        }

        verify(api).execute(sendMessageMethod)
        verifyNoMoreInteractions(telegramUserDao, memeDao, voteDao, api)
    }

    @Test
    fun shouldDisablePublicationWhenConfigCommandReceived() {
        val update = mock(CommandUpdate::class.java).apply {
            `when`(value).thenReturn(CommandUpdate.Command.CONFIG)
            `when`(messageId).thenReturn(666)
            //TODO fix the static mocking properties
            `when`(chatId).thenReturn(TelegramConfig.BETA_CHAT_ID)
            `when`(text).thenReturn("disable publishing")
        }

        `when`(update.value).thenReturn(CommandUpdate.Command.CONFIG)
        `when`(update.messageId).thenReturn(666)
        //TODO fix the static mocking properties
        `when`(update.chatId).thenReturn(TelegramConfig.BETA_CHAT_ID)
        `when`(update.text).thenReturn("disable publishing")

        commandHandler.handleSync(update)

        val sendMessageMethod = SendMessage().apply {
            chatId = TelegramConfig.BETA_CHAT_ID
            parseMode = ParseMode.HTML
            replyToMessageId = update.messageId
            text = "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–µ–º–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω–∞"
        }

        verify(api).execute(sendMessageMethod)
        verifyNoMoreInteractions(telegramUserDao, memeDao, voteDao, api)
    }

    @Test
    fun shouldDoNothingOnUnknownCommand() {
        val update = mock(CommandUpdate::class.java)

        `when`(update.value).thenReturn(null)
        commandHandler.handleSync(update)
        verifyNoMoreInteractions(telegramUserDao, memeDao, voteDao, api)
    }

    @Test
    fun shouldSendZeroStatsMessageOnStatsCommandWhenNoData() {
        val update = mock(CommandUpdate::class.java).apply {
            `when`(value).thenReturn(CommandUpdate.Command.STATS)
            `when`(messageId).thenReturn(666)
            `when`(senderId).thenReturn("777")
        }

        `when`(memeDao.findAllBySenderId(777)).thenReturn(mapOf())
        `when`(voteDao.findAllByVoterId(777)).thenReturn(listOf())

        val sendMessageMethod = SendMessage().apply {
            parseMode = ParseMode.HTML
            chatId = update.senderId
            text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è–π –∏ –æ—Ü–µ–Ω–∏–≤–∞–π –º–µ–º—ã!"
        }

        commandHandler.handleSync(update)
        verify(api).execute(sendMessageMethod)
        verify(memeDao).findAllBySenderId(777)
        verify(voteDao).findAllByVoterId(777)
        verifyNoMoreInteractions(telegramUserDao, memeDao, voteDao, api)
    }

    @Test
    fun shouldSendWeekAndGlobalStatsMessageOnStatsCommand() {
        val update = mock(CommandUpdate::class.java).apply {
            `when`(value).thenReturn(CommandUpdate.Command.STATS)
            `when`(messageId).thenReturn(666)
            `when`(senderId).thenReturn("777")
        }

        val freshMeme = mock(Meme::class.java)
        `when`(freshMeme.created).thenReturn(Instant.now())

        val oldMeme = mock(Meme::class.java)
        `when`(oldMeme.created).thenReturn(Instant.now().minusDays(10)) // more than a week ago

        val freshLike = mock(Vote::class.java).apply {
            `when`(value).thenReturn(VoteValue.UP)
            `when`(created).thenReturn(Instant.now()) // more than a week ago
        }

        val freshDislike = mock(Vote::class.java).apply {
            `when`(value).thenReturn(VoteValue.DOWN)
            `when`(created).thenReturn(Instant.now()) // more than a week ago
        }

        val oldLike = mock(Vote::class.java).apply {
            `when`(value).thenReturn(VoteValue.UP)
            `when`(created).thenReturn(Instant.now().minusDays(10)) // more than a week ago
        }

        val oldDislike = mock(Vote::class.java).apply {
            `when`(value).thenReturn(VoteValue.DOWN)
            `when`(created).thenReturn(Instant.now().minusDays(10)) // more than a week ago
        }

        val memesWithVotes = mapOf(
                freshMeme to listOf(freshLike, freshLike, freshLike),
                freshMeme to listOf(freshLike, freshLike, freshDislike),
                freshMeme to listOf(freshLike, freshDislike, freshDislike),

                oldMeme to listOf(freshLike, freshLike, freshLike),
                oldMeme to listOf(freshLike, freshLike, freshDislike),
                oldMeme to listOf(freshLike, freshDislike, freshDislike)
        )
        `when`(memeDao.findAllBySenderId(777)).thenReturn(memesWithVotes)

        val votes = listOf(
                freshLike,
                freshLike,
                freshDislike,
                freshDislike,
                freshDislike,

                oldLike,
                oldDislike,
                oldDislike

        )
        `when`(voteDao.findAllByVoterId(777)).thenReturn(votes)

        `when`(telegramUserDao.findUserRank("777")).thenReturn(9)

        val sendMessageMethod = SendMessage().apply {
            parseMode = ParseMode.HTML
            chatId = update.senderId
            text = """
                <u><b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:</b></u>

                –ú–µ–º–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>1</b>
                –ü—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é: <b>1</b>
                –ü–æ–ª—É—á–µ–Ω–æ: <b>üíé 1 ¬∑ 2 üí©</b>

                –ú–µ–º–æ–≤ –æ—Ü–µ–Ω–µ–Ω–æ: <b>5</b>
                –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: <b>üíé 2 ¬∑ 3 üí©</b>

                –†–∞–Ω–∫ –∑–∞ –Ω–µ–¥–µ–ª—é: <b>#0</b>

                <u><b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:</b></u>

                –ú–µ–º–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>2</b>
                –ü—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é: <b>2</b>
                –ü–æ–ª—É—á–µ–Ω–æ: <b>üíé 2 ¬∑ 4 üí©</b>

                –ú–µ–º–æ–≤ –æ—Ü–µ–Ω–µ–Ω–æ: <b>8</b>
                –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: <b>üíé 3 ¬∑ 5 üí©</b>

                –†–∞–Ω–∫: <b>#9</b>
            """.trimIndent()
        }

        commandHandler.handleSync(update)
        verify(api).execute(sendMessageMethod)
        verify(memeDao).findAllBySenderId(777)
        verify(voteDao).findAllByVoterId(777)
        verify(telegramUserDao).findUserRank("777", 7)
        verify(telegramUserDao).findUserRank("777")
        verifyNoMoreInteractions(telegramUserDao, memeDao, voteDao, api)
    }

}